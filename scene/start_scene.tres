[gd_resource type="ShaderMaterial" load_steps=10 format=3 uid="uid://cxi4v21xmcjhw"]

[sub_resource type="Shader" id="Shader_c631g"]
code = "shader_type spatial;

uniform vec4 color_bottom : source_color = vec4(0.0, 0.0, 0.0, 0.8);
uniform vec4 color_top    : source_color = vec4(0.0, 0.0, 0.0, 0.0);

uniform float min_height = 0.0;
uniform float max_height = 3.0;

varying vec3 world_position;

void vertex() {
	world_position = (MODEL_MATRIX * vec4(VERTEX.xy, 0.0, 1.0)).xyz;
}

void fragment() {
	float height = world_position.y - NODE_POSITION_WORLD.y;

	float factor = clamp((height - min_height) / (max_height - min_height), 0.0, 1.0);

	ALBEDO = mix(color_bottom.rgb, color_top.rgb, factor);
	ALPHA = mix(color_bottom.a, color_top.a, factor);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_cu0b0"]
render_priority = 0
shader = SubResource("Shader_c631g")
shader_parameter/color_bottom = Color(0, 0.467758, 0.573977, 0.705882)
shader_parameter/color_top = Color(0, 0, 0, 0)
shader_parameter/min_height = -0.87
shader_parameter/max_height = 2.78

[sub_resource type="Shader" id="Shader_4oepr"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_toon,specular_toon,shadows_disabled;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_g,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D color_gradient;
uniform sampler2D color_ramp3;

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	float basic_fresnel = fresnel(4.0, NORMAL, VIEW);

	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb + (basic_fresnel * texture(color_ramp3, vec2(basic_fresnel, 0.0)).rgb * 1.0);
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(0.0,1.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = 0.0;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
}

void light() {
	float dotproduct = clamp(dot(NORMAL, LIGHT), -0.9, 0.9);
	float sample = clamp((dotproduct + 1.0) * ATTENUATION / 2.1, 0.05, 0.95);
	vec4 shaded = texture(color_gradient, vec2(sample, 0.0));
	DIFFUSE_LIGHT += (shaded.rgb * LIGHT_COLOR) / 2.0;
}"

[sub_resource type="Gradient" id="Gradient_q24np"]
offsets = PackedFloat32Array(0, 0.134557, 0.40367, 0.550459, 0.574924, 0.788991, 0.902141, 0.926606)
colors = PackedColorArray(0, 0, 0, 1, 0.0338533, 0.0338533, 0.0338533, 1, 0.0728426, 0.0728426, 0.0728426, 1, 0.48179, 0.481789, 0.481789, 1, 0.501407, 0.501406, 0.501406, 1, 1, 1, 1, 1, 0.537011, 0.537011, 0.537011, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_1o32l"]
gradient = SubResource("Gradient_q24np")

[sub_resource type="Gradient" id="Gradient_txeoh"]
offsets = PackedFloat32Array(0.54433, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_dfwja"]
gradient = SubResource("Gradient_txeoh")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_djrr5"]
load_path = "res://.godot/imported/just_office3_Metal Roughness.png-de9cf5b288e5e5325d19f8a29f6e11f9.ctex"

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8gwms"]

[resource]
resource_name = "GobotMat"
render_priority = 0
next_pass = SubResource("ShaderMaterial_cu0b0")
shader = SubResource("Shader_4oepr")
shader_parameter/albedo = Color(0.85828, 0.857383, 0.840662, 1)
shader_parameter/point_size = 0.0
shader_parameter/roughness = 0.016
shader_parameter/metallic_texture_channel = Vector4(0, 0, 1, 0)
shader_parameter/specular = 1.0
shader_parameter/metallic = 0.575
shader_parameter/normal_scale = 7.6e-07
shader_parameter/uv1_scale = Vector3(3.275, 3.565, 1)
shader_parameter/uv1_offset = Vector3(0, 0.295, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_metallic = SubResource("CompressedTexture2D_djrr5")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_8gwms")
shader_parameter/color_gradient = SubResource("GradientTexture1D_1o32l")
shader_parameter/color_ramp3 = SubResource("GradientTexture1D_dfwja")
