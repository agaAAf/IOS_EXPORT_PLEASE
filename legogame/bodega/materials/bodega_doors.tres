[gd_resource type="ShaderMaterial" load_steps=7 format=3 uid="uid://cff81qw6yyvhe"]

[ext_resource type="Texture2D" uid="uid://c4ryd37tcvt62" path="res://legogame/bodega/materials/floor.png" id="1_17a24"]

[sub_resource type="Shader" id="Shader_qvs20"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_toon,specular_toon,shadows_disabled;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_g,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D color_gradient;
uniform sampler2D color_ramp3;

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	float basic_fresnel = fresnel(4.0, NORMAL, VIEW);

	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb + (basic_fresnel * texture(color_ramp3, vec2(basic_fresnel, 0.0)).rgb * 1.0);
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(0.0,1.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = 0.0;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
}

void light() {
	float dotproduct = clamp(dot(NORMAL, LIGHT), -0.9, 0.9);
	float sample = clamp((dotproduct + 1.0) * ATTENUATION / 2.1, 0.05, 0.95);
	vec4 shaded = texture(color_gradient, vec2(sample, 0.0));
	DIFFUSE_LIGHT += (shaded.rgb * LIGHT_COLOR) / 2.0;
}"

[sub_resource type="Gradient" id="Gradient_fbhcw"]
offsets = PackedFloat32Array(0, 0.222437, 0.301741, 0.316901, 0.386847, 0.397614, 0.564612, 0.576541, 0.908549, 0.928429)
colors = PackedColorArray(0, 0, 0, 1, 0.0338533, 0.0338533, 0.0338533, 1, 0.0728426, 0.0728426, 0.0728426, 1, 0.48179, 0.481789, 0.481789, 1, 0.501407, 0.501406, 0.501406, 1, 1, 1, 1, 1, 0.954962, 0.954962, 0.954962, 1, 0.590161, 0.590161, 0.590161, 1, 0.537011, 0.537011, 0.537011, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_k18st"]
gradient = SubResource("Gradient_fbhcw")

[sub_resource type="Gradient" id="Gradient_wfsgt"]
offsets = PackedFloat32Array(0.54433, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_uyaxk"]
gradient = SubResource("Gradient_wfsgt")

[resource]
resource_name = "GobotMat"
render_priority = 0
shader = SubResource("Shader_qvs20")
shader_parameter/albedo = Color(0.451378, 0.447905, 0.42567, 1)
shader_parameter/point_size = 0.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 1.0
shader_parameter/metallic = 0.0
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_scale = Vector3(1, 2.525, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("1_17a24")
shader_parameter/color_gradient = SubResource("GradientTexture1D_k18st")
shader_parameter/color_ramp3 = SubResource("GradientTexture1D_uyaxk")
